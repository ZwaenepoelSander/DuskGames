/*
Copyright (c) 2024 Dusk
All rights reserved.

This code is proprietary to Dusk AI Inc.
The code may be used solely for accessing the Service provided by Dusk AI Inc. following the Dusk Terms of Service ("Terms") accessible at dusk.gg/eula. You may not use this code for any use or purpose other than as expressly permitted by the Terms.
Restrictions set forth in the Terms include, but is not limited to, that you may not copy, adapt, modify, prepare derivative works based upon, distribute, license, sell, transfer, publicly display, publicly perform, transmit, stream, broadcast, attempt to discover any source code, reverse engineer, decompile, dissemble, or otherwise exploit the code as a whole or any portion of the code.
*/
type PersistedPlayers<PersistedData> = Record<PlayerId, PersistedData>;
type GameStateWithPersisted<GameState, PersistedData> = GameState & {
    persisted: PersistedPlayers<PersistedData>;
};
type UntypedPersistedData = {};
type UntypedGameState = Record<string, any>;
type UntypedGameStateWithPersisted = GameStateWithPersisted<UntypedGameState, UntypedPersistedData>;
type SessionId = string;
type GameId = number;
type PlayerId = string;
type RandomSeed = number;
type Player = {
    playerId: PlayerId;
    displayName: string;
    avatarUrl: string;
};
type Players = Record<PlayerId, Player>;

type ServerErrorMessage = keyof typeof errorMap;
declare const errorMap: {
    GAME_OVER_INVALID_OPTIONS: {
        devUIMessage: string;
        consoleMessage: (data: any) => string;
        printExtraDataInDevUI: true;
    };
    STATE_SYNC_TOO_BIG: {
        devUIMessage: (data: any) => string;
    };
    SERVER_UPDATE_LOOP_FAILED: {
        devUIMessage: string;
        printExtraDataInDevUI: true;
    };
    ACTION_FAILED: {
        devUIMessage: (data: any) => string;
        printExtraDataInDevUI: true;
    };
    PLAYER_JOINED_FAILED: {
        devUIMessage: string;
        printExtraDataInDevUI: true;
    };
    PLAYER_LEFT_FAILED: {
        devUIMessage: string;
        printExtraDataInDevUI: true;
    };
    UPDATE_LOOP_BEHIND_GAME_TIME: {
        devUIUnexpected: true;
    };
    SERVER_UPDATE_LOOP_FASTER_THAN_GAME_TIME: {
        devUIUnexpected: true;
    };
    GET_GAME_STATE_FAILED: {
        devUIUnexpected: true;
    };
    SERVER_RECEIVED_MESSAGE_TOO_BIG: {
        devUIUnexpected: true;
    };
    SERVER_MESSAGE_TO_CLIENTS_TOO_BIG: {
        devUIUnexpected: true;
    };
    SERVER_FULL: {
        devUIUnexpected: true;
    };
    ON_PLAYER_JOINED_CALLBACK_MISSING: {
        devUIUnexpected: true;
    };
    ROOM_GAME_STATE_MISSING: {
        devUIUnexpected: true;
    };
    ACTION_PARAMS_SIZE_OVER_LIMIT: {
        devUIUnexpected: true;
    };
    SETUP_PERSISTED_KEY_NOT_ALLOWED: {
        devUIMessage: string;
    };
    PERSISTED_NOT_AN_OBJECT: {
        devUIMessage: string;
    };
    PERSISTED_KEY_MISSING: {
        devUIMessage: string;
    };
    PERSISTED_EXTRA_KEY_DETECTED: {
        devUIMessage: (data: any) => string;
    };
    PERSISTED_PLAYER_MISSING: {
        devUIMessage: (data: any) => string;
    };
    PERSISTED_PLAYER_NOT_AN_OBJECT: {
        devUIMessage: (data: any) => string;
    };
    PERSISTED_PLAYER_OVER_LIMIT: {
        devUIMessage: (data: any) => string;
    };
    SETUP_GAME_OVER_NOT_ALLOWED: {
        devUIMessage: string;
    };
    PERSISTED_STATE_NOT_ENABLED: {
        devUIUnexpected: true;
    };
    PERSISTED_STATE_USED_WITHOUT_FLAG: {
        devUIMessage: string;
    };
    SETUP_FAILED: {
        devUIMessage: string;
        printExtraDataInDevUI: true;
    };
    PERSIST_DATA_AFTER_ERROR_NOT_AVAILABLE: {
        devUIUnexpected: true;
    };
    GET_PERSISTED_STATE_FAILED: {
        devUIUnexpected: true;
    };
    GAME_END_PERSIST_USER_NOT_FOUND: {
        devUIUnexpected: true;
    };
    PLAYER_LEFT_NO_USERS_INCORRECT_PERSISTED_PLAYERS: {
        devUIUnexpected: true;
    };
};

type GameOverResult = "WON" | "LOST" | "TIE" | number;
type GameOverOptions = {
    delayPopUp?: boolean;
    minimizePopUp?: boolean;
} & ({
    players: {
        [playerId: PlayerId]: GameOverResult;
    };
    everyone?: never;
} | {
    players?: never;
    everyone: GameOverResult;
});
type GameOverGameEnded = {
    reason: "gameEnded";
    options: GameOverOptions;
};
type GameOverPlayerLeft = {
    reason: "playerLeft";
};
type GameOverMinPlayers = {
    reason: "minPlayers";
};
type GameOverError = {
    reason: "err";
    err?: {
        message: ServerErrorMessage;
        data?: object;
    };
};
type GameOverContext = (GameOverMinPlayers | GameOverPlayerLeft | GameOverGameEnded | GameOverError) & {
    players: Players;
};

type PlayersRandomState = Record<PlayerId, {
    seed: RandomSeed;
    actionCount: number;
}>;
type GameContext = {
    readonly gameOver: GameOverContext | null;
    orderNumber: number;
    sessionId: SessionId;
    gameId: GameId;
};
type ServerSerializationData<GameStateWithPersisted> = {
    game: GameStateWithPersisted;
} & ServerState;
type ServerState = {
    context: GameContext;
    random: PlayersRandomState;
    gameTime: number;
    updateCount: number;
};

declare function validateServerSerializationData(v: unknown): ServerSerializationData<UntypedGameStateWithPersisted>;

export { validateServerSerializationData };
